plot.zoo(tmpData.zoo[,4], type="b", main="Mean of US.10Y.TR when HAM1 <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.US.10Y.TR, lwd=2, col="red")
points(tmpData.zoo[idx, 4], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for residual
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(tmpData.zoo[,1], type="b", main="HAM1 returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.fm, lwd=2, col="red")
points(tmpData.zoo[idx, 1], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(tmpData.zoo[,5], type="b", main="Mean of Standardized Residual when HAM1 <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=mcETL.residual, lwd=2, col="red")
points(tmpData.zoo[idx, 5], type="p", pch=16, col="red")
par(mfrow=c(1,1))
################################################################################
# portfolio risk budgeting
################################################################################
#
# fund contribution to portfolio SD
#
# use portfolioSdDecomposition() function from factorAnalytics package
args(portfolioSdDecomposition)
# compute with sample covariance matrix (pairwise complete obvs)
cov.sample = cov(managers.df[,manager.names],
use="pairwise.complete.obs")
port.sd.decomp.sample = portfolioSdDecomposition(w.vec, cov.sample)
names(port.sd.decomp.sample)
port.sd.decomp.sample
# show bar chart
barplot(port.sd.decomp.sample$pcsd.p,
main="Fund Percent Contributions to Portfolio SD",
ylab="Percent Contribution", legend.text=F,
col="blue")
# compute with factor model covariance matrix
port.sd.decomp.fm = portfolioSdDecomposition(w.vec, cov.fm)
port.sd.decomp.fm
#
# fund contribution to portfolio ETL
#
# use ES() function in PerformanceAnalytics package
# note: result only gives percent contribution to ETL, no marginal or component
args(ES)
# need to remove missing values prior to computation
port.ES.decomp = ES(na.omit(managers.df[,manager.names]),
p=0.95, method="historical",
portfolio_method = "component",
weights = w.vec)
port.ES.decomp
# use portfolioEsDecomposition from factorAnalytics package
# results are slightly different due to different implementation of quantile function
args(portfolioEsDecomposition)
port.ES.decomp = portfolioEsDecomposition(na.omit(managers.df[,manager.names]),
w.vec, tail.prob=0.05)
names(port.ES.decomp)
port.ES.decomp
# show bar chart
barplot(port.ES.decomp$PCES,
main="Fund Percent Contributions to Portfolio ETL",
ylab="Percent Contribution", legend.text=F,
col="blue")
## graphical illustration of func marginal contribution to portfolio ETL
# find those observations less than VaR
nrow(r.p)
VaR.p = quantile(r.p, prob=0.05)
idx = which(r.p <= VaR.p)
rownames(r.p)[idx]
mcES = port.ES.decomp$MCES
# mcETL plot for HAM1
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM1"], type="b", main="Mean of HAM1 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM1"], lwd=2, col="red")
points(managers.zoo[idx, "HAM1"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for HAM2
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM2"], type="b", main="Mean of HAM2 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM2"], lwd=2, col="red")
points(managers.zoo[idx, "HAM2"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for HAM3
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM3"], type="b", main="Mean of HAM3 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM3"], lwd=2, col="red")
points(managers.zoo[idx, "HAM3"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for HAM4
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM4"], type="b", main="Mean of HAM4 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM4"], lwd=2, col="red")
points(managers.zoo[idx, "HAM4"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for HAM5
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM5"], type="b", main="Mean of HAM5 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM5"], lwd=2, col="red")
points(managers.zoo[idx, "HAM5"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
# mcETL plot for HAM6
par(mfrow=c(2,1))
# plot fund data with VaR violations
plot.zoo(r.p.zoo, type="b", main="Portfolio Returns and 5% VaR Violations",
col="blue", ylab="Returns")
abline(h=0)
abline(h=VaR.p, lwd=2, col="red")
points(r.p.zoo[idx], type="p", pch=16, col="red")
# plot factor data and highlight obvs associated with R <= VaR
plot.zoo(managers.zoo[, "HAM6"], type="b", main="Mean of HAM6 when PORT <= 5% VaR",
col="blue", ylab="Returns")
abline(h=0)
abline(h=-mcES[1,"HAM6"], lwd=2, col="red")
points(managers.zoo[idx, "HAM6"], type="p", pch=16, col="red")
par(mfrow=c(1,1))
################################################################################
# factor model Monte Carlo
################################################################################
# examime distribution of residuals
hist(residuals(reg.list$HAM2))
qqnorm(residuals(reg.list$HAM1))
qqline(residuals(reg.list$HAM1))
#
# FMMC with normal distribution for factor model residuals
#
# resample from historical factors
n.boot = 5000
# set random number sed
set.seed(123)
# reshuffled indices with replacement
bootIdx = sample(nrow(managers.df),  n.boot, replace=TRUE)
# resampled factor data
factorDataBoot.mat = as.matrix(managers.df[bootIdx, factor.names])
# FMMC using normal distribution for residuals and alpha = 0
returns.boot = matrix(0, n.boot, length(manager.names))
resid.sim = matrix(0, n.boot, length(manager.names))
colnames(returns.boot) = colnames(resid.sim) = manager.names
for (i in manager.names) {
returns.fm = factorDataBoot.mat%*%Betas[i, ]
resid.sim[, i] = rnorm(n.boot,sd=sqrt(ResidVars[i]))
returns.boot[, i] = returns.fm + resid.sim[, i]
}
# compute FMMC portfolio returns and factor model residuals
r.p.boot = returns.boot%*%w.vec
resid.fm.p = resid.sim%*%w.vec
#
# compute factor contributions to ETL using FMMC sample
#
# compute decomposition in loop
factor.es.decomp.list = list()
for (i in manager.names) {
tmpData = cbind(returns.boot[, i], factorDataBoot.mat,
resid.sim[, i]/sqrt(ResidVars[i]))
colnames(tmpData)[c(1,5)] = c(manager.names[i], "residual")
factor.es.decomp.list[[i]] = factorModelFactorEsDecomposition(tmpData, Betas[i,],
ResidVars[i], tail.prob=0.05)
}
# add portfolo retsults - need factor model residuals
tmpData = cbind(r.p.boot, factorDataBoot.mat,
resid.fm.p/sqrt(as.numeric(var.p.resid)))
colnames(tmpData)[c(1,5)] = c("PORT", "residual")
factor.es.decomp.list[["PORT"]] = factorModelFactorEsDecomposition(tmpData, beta.p,
var.p.resid, tail.prob=0.05)
# stacked bar charts of percent contributions to SD
getCETL = function(x) {
x$cES.fm
}
# report as positive number
cr.etl = sapply(factor.es.decomp.list, getCETL)
rownames(cr.etl) = c(factor.names, "residual")
barplot(cr.etl, main="Factor Contributions to ETL",
legend.text=T, args.legend=list(x="topleft"),
col=c("blue","red","green","white"))
#
# compute fund contributions to ETL using FMMC sample
#
port.ES.decomp.fmmc = portfolioEsDecomposition(returns.boot,
w.vec, tail.prob=0.05)
port.ES.decomp.fmmc
# show bar chart
barplot(port.ES.decomp.fmmc$PCES,
main="Fund Percent Contributions to Portfolio ETL",
ylab="Percent Contribution", legend.text=F,
col="blue")
my.panel <- function(...) {
lines(...)
abline(h=0)
}
# plot hedge fund data
plot.zoo(managers[, 1:6], main="Hedge Fund Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
# plot risk factor data
plot.zoo(managers[, 7:10], main="Risk Factor Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
ordered.cor.managers <- cor.managers[ord, ord]
ordered.cor.managers
plot(ordered.cor.managers, col=cm.colors(11)[5*ordered.cor.managers + 6])
plot(ordered.cor.managers)
plot(ordered.cor.managers, col=cm.colors(11))
library(ellipse)
install.packages("ellipse")
install.packages("fEcofin")
plotcorr(ordered.cor.managers, col=cm.colors(11)[5*ordered.cor.managers + 6])
library(ellipse)
library(fEcofin)                # various data sets
plotcorr(ordered.cor.managers, col=cm.colors(11)[5*ordered.cor.managers + 6])
plotcorr(ordered.cor.managers, col=cm.colors(11)[5*ordered.cor.managers + 6])
cor.managers = cor(managers, use="pairwise.complete.obs")
ord <- order(cor.managers[1,])
ordered.cor.managers <- cor.managers[ord, ord]
plotcorr(ordered.cor.managers, col=cm.colors(11)[5*ordered.cor.managers + 6])
table.Stats(managers[, factor.names])
table.Stats(managers[, manager.names])
names(reg.list)
class(reg.list$HAM1)
reg.list$HAM1
summary(reg.list$HAM1)
dataToPlot = cbind(fitted(reg.list$HAM1), na.omit(managers.df$HAM1))
colnames(dataToPlot) = c("Fitted","Actual")
chart.TimeSeries(dataToPlot, main="FM fit for HAM1",
colorset=c("black","blue"), legend.loc="bottomleft")
# risk factor sample covariance matrix
cov.factors = var(managers.df[, factor.names])
# FM covariance matrix
cov.fm = Betas%*%cov.factors%*%t(Betas) + diag(ResidVars)
# FM correlation matrix
cor.fm = cov2cor(cov.fm)
# plot correlations using plotcorr() from ellipse package
rownames(cor.fm) = colnames(cor.fm)
ord <- order(cor.fm[1,])
ordered.cor.fm <- cor.fm[ord, ord]
plot(ordered.cor.fm, col=cm.colors(11)[5*ordered.cor.fm + 6])
plotcorr(ordered.cor.fm, col=cm.colors(11)[5*ordered.cor.fm + 6])
reg.results = cbind(Betas, sqrt(ResidVars), R2values)
colnames(reg.results)[4] = "ResidSD"
reg.results
save.image("C:/Users/Sarah/Google Drive/PROJECT/Funds Project.RData")
load("C:/Users/Sarah/Google Drive/PROJECT/Funds Project.RData")
index.names=c(colnames(Managers[7:12]))
library(PerformanceAnalytics)
library(ellipse)
library(tseries)
# Manager data
data(managers)
# manager to research here is HAM1 (hypothetical asset manager 1)
# Benchmark Selection (should be done through style analysis which I cannot do in R)
#style.fit and other functions are not currenty available within the factorAnalytics package
#which is apparently the currently available factor analysis package, and FactorAnalytics
#is not currently available for use, but only as a source package for developers
# solutions: 1. do rudimentary style analysis in excel and then import the results into R
# remove data prior to 1997-01-01 b/c HF index is not observed
managers1 = managers["2004::2006",1:6]
#
loadPath = "C:\\Users\\Sarah\\Google Drive\\PROJECT\\"
dev.df = na.omit(read.csv(file=paste(loadPath, "msci eafe.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
em.df = na.omit(read.csv(file=paste(loadPath, "EEMfrom2003.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
sg.df = na.omit(read.csv(file=paste(loadPath, "small cap growth 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
sv.df = na.omit(read.csv(file=paste(loadPath, "small cap value 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
lg.df =na.omit( read.csv(file=paste(loadPath, "russell 1000 growth from march 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
lv.df = na.omit(read.csv(file=paste(loadPath, "russell 1000 value from march 2000.csv", sep=""),
header=TRUE, stringsAsFactors=FALSE))
# to produce zoo objects
rownames(lg.df) = lg.df$Date
rownames(lv.df) = lv.df$Date
rownames(sv.df) = sv.df$Date
rownames(sg.df) = sg.df$Date
rownames(dev.df) = dev.df$Date
rownames(em.df) = em.df$Date
em.df = em.df[-37, "Adj.Close", drop=FALSE]
dev.df = dev.df[, "Adj.Close", drop=FALSE]
sg.df = sg.df[, "Adj.Close", drop=FALSE]
sv.df = sv.df[, "Adj.Close", drop=FALSE]
lv.df = lv.df[, "Adj.Close", drop=FALSE]
lg.df = lg.df[, "Adj.Close", drop=FALSE]
dates.em = as.yearmon(rownames(em.df), format="%m/%d/%Y")
dates.sg = as.yearmon(rownames(sg.df), format="%m/%d/%Y")
dates.dev = as.yearmon(rownames(dev.df), format="%m/%d/%Y")
dates.sv = as.yearmon(rownames(sv.df), format="%m/%d/%Y")
dates.lg = as.yearmon(rownames(lg.df), format="%m/%d/%Y")
dates.lv = as.yearmon(rownames(lv.df), format="%m/%d/%Y")
Styles=cbind(dev.df,sg.df,sv.df,lv.df,lg.df)
colnames(Styles)=c("Ex-US","Small Growth","Small Value","Large Value","Large Growth")
Style=na.omit(CalculateReturns(xts(Styles, order.by=dates.lg)))
em=na.omit(CalculateReturns(xts(em.df,order.by=dates.em)))
colnames(em)="Emerging"
Managerz=xts(managers1,order.by=dates.em[-1])
#Append the index Values
Managers=na.omit(merge(Managerz["2003::2006"],Style["2003::2006"],em["2003::2006"]))
# Style Indices
chart.CumReturns(Managers[,7:9], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
my.panel <- function(...) {
lines(...)
abline(h=0)
}
# plot hedge fund data
plot.zoo(Managers[, 1:6], main="Hedge Fund Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
# plot Style Indices data
plot.zoo(Managers[, 7:10], main="Style Indices Returns",
plot.type="multiple", type="h", lwd=2, col="blue",
panel=my.panel)
# plot cumulative returns using PerformanceAnalytics
# function chart.CumReturns()
# hedge funds
chart.CumReturns(Managers[,1:6], main="Cumulative Returns",
wealth.index=TRUE, legend.loc="topleft")
cor.managers = cor(Managers, use="pairwise.complete.obs")
#ord <- order(cor.managers[1,])
#ordered.cor.managers <- cor.managers[ord, ord]
#I plotted the regular cor matrix, since the ordered one messed up my order!
plotcorr(cor.managers, col=cm.colors(11)[5*cor.managers + 6])
################################################################################
# Sharpe Returns  Model for 6 hedge fund managers
################################################################################
#
# create data frame for regression analysis
#
# with xts objects, you extract data using coredata() and you extract
# dates with index()
Managers.df = as.data.frame(coredata(Managers))
RFR.df=as.data.frame(coredata((managers["2004::2006",10])))
# subtract "US 3m TR" (Risk free rate) from all returns. note: apply() changes
# Managers.df to class "matrix" to coerce result back to data.frame
Managers.df = apply(Managers.df, 2,
function(x) {x - RFR.df})
Managers.df = as.data.frame(Managers.df)
colnames(Managers.df)=colnames(Managers)
rownames(Managers.df) = as.character(index(Managers))
index.names=c(colnames(Managers[7:12]))
manager.names=c(colnames(Managers[1:6]))
table.Stats(Managers[, manager.names])
manager.names=c(colnames(Managers[1:6]))
table.Stats(Managers[, index.names])
head(Managers[,index.names])
head(Managers[index.names])
index.names
manager.names
colnames(Managers)
colnames(Managers[7:12])
head(Managers[7:12])
index.names=c(colnames(Managers[,7:12]))
index.names
index.names=c(colnames(Managers[,7:12]))
manager.names=c(colnames(Managers[,1:6]))
table.Stats(Managers[, manager.names])
# index data
table.Stats(Managers[, index.names])
reg.list = list()
Betas = matrix(0, length(manager.names), length(index.names))
Betas = matrix(0, length(manager.names), length(index.names))
Betas = matrix(0, length(manager.names), length(index.names))
colnames(Betas) = index.names
rownames(Betas) = manager.names
Alphas = ResidVars = R2values = rep(0, length(manager.names))
names(Alphas) = names(ResidVars) = names(R2values) = manager.names
Betas = matrix(0, length(manager.names), length(index.names))
colnames(Betas) = index.names
rownames(Betas) = manager.names
Alphas = ResidVars = R2values = rep(0, length(manager.names))
names(Alphas) = names(ResidVars) = names(R2values) = manager.names
for (i in manager.names) {
reg.df = na.omit(Managers.df[, c(i, index.names)])
fm.formula = as.formula(paste(i,"~", ".", sep=" "))
fm.fit = lm(fm.formula, data=reg.df)
fm.summary = summary(fm.fit)
reg.list[[i]] = fm.fit
Alphas[i] = coef(fm.fit)[1]
Betas[i, ] = coef(fm.fit)[-1]
ResidVars[i] = fm.summary$sigma^2
R2values[i] =  fm.summary$r.squared
}
# examine the elements of reg.list  - they are lm objects!
names(reg.list)
class(reg.list$HAM1)
reg.list$HAM1
summary(reg.list$HAM1)
dataToPlot = cbind(fitted(reg.list$HAM1), na.omit(Managers.df$HAM1))
colnames(dataToPlot) = c("Fitted","Actual")
chart.TimeSeries(dataToPlot, main="FM fit for HAM1",
colorset=c("black","blue"), legend.loc="bottomleft")
head(Managers.df)
chart.TimeSeries(fitted(reg.list$HAM1))
chart(data)
chart(dataToPlot)
reg.results = cbind(Betas, sqrt(ResidVars), R2values)
colnames(reg.results)[4] = "ResidSD"
reg.results
reg.results = cbind(Betas, sqrt(ResidVars), R2values)
reg.results
reg.results = cbind(Betas, sqrt(ResidVars), R2values)
colnames(reg.results)[7] = "ResidSD"
reg.results
#
cov.factors = var(Managers.df[, index.names])
# FM covariance matrix
cov.fm = Betas%*%cov.factors%*%t(Betas) + diag(ResidVars)
cor.fm = cov2cor(cov.fm)
rownames(cor.fm) = colnames(cor.fm)
plotcorr(ordered.cor.fm, col=cm.colors(11)[5*ordered.cor.fm + 6])
plotcorr(cor.fm, col=cm.colors(11)[5*cor.fm + 6])
plotcorr(cor.fm, col=cm.colors(11)[5*cor.fm + 6])
cov.factors = var(Managers.df[, index.names])
cov.fm = Betas%*%cov.factors%*%t(Betas) + diag(ResidVars)
# FM correlation matrix
cor.fm = cov2cor(cov.fm)
cor.fm
cov.factors = var(Managers.df[, index.names])
cov.factors
w.vec = rep(1,6)/6
names(w.vec) = manager.names
w.vec
r.p = as.matrix(na.omit(Managers.df[, manager.names]))%*%w.vec
r.p.zoo = zoo(r.p, as.Date(rownames(r.p)))
r.p = as.matrix(na.omit(Managers.df[, manager.names]))%*%w.vec
r.p
head(Managers.df)
manager.names
r.p.zoo = zoo(r.p, as.Date(rownames(r.p)))
rownames(r.p)
r.p.zoo = zoo(r.p, as.yearmon(rownames(r.p)))
alpha.p = as.numeric(crossprod(Alphas,w.vec))
beta.p = t(Betas)%*%w.vec
var.p.systematic = t(beta.p)%*%cov.factors%*%beta.p
var.p.resid = t(w.vec)%*%diag(ResidVars)%*%w.vec
var.fm.p = var.p.systematic + var.p.resid
var.fm.p = as.numeric(var.fm.p)
r.square.p = as.numeric(var.p.systematic/var.fm.p)
fm.p = c(alpha.p, beta.p, sqrt(var.fm.p), r.square.p)
names(fm.p) = c("intercept", index.names, "sd", "r-squared")
fm.p
fm.resid = rep(0, nrow(r.p))
smpl = rownames(r.p)
for (i in manager.names) {
reg.resid = residuals(reg.list[[i]])
fm.resid = fm.resid + w.vec[i]*reg.resid[smpl]
}
jarque.bera.test(Managers.df$HAM1)
jarque.bera.test(Managers.df$HAM2)
jarque.bera.test(Managers.df$HAM3)
jarque.bera.test(Managers.df$HAM4)
jarque.bera.test(na.omit(Managers.df$HAM5))
jarque.bera.test(na.omit(Managers.df$HAM6))
normalTest = function(x) {
tmp.test = jarque.bera.test(na.omit(x))
ans = c(tmp.test$statistic, tmp.test$p.value)
names(ans) = c("statistic", "p-value")
return(ans)
}
apply(Managers.df[, manager.names], 2, normalTest)
args(VaR)
VaR(Managers.df[, manager.names], p=0.95, method="gaussian")
VaR(Managers.df[, manager.names], p=0.99, method="gaussian")
load("C:/Users/Sarah/Google Drive/PROJECT/.RData")
load("C:/Users/Sarah/Google Drive/PROJECT/Funds Project.RData")
